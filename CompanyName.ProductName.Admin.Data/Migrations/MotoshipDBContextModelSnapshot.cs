// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using CompanyName.ProductName.Admin.Data;

namespace CompanyName.ProductName.Admin.Data.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CompanyName.ProductName.Admin.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("CurrencyId");

                    b.Property<string>("ISO2")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("ISO3")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<int>("NameTranslationId");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("NameTranslationId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("CompanyName.ProductName.Admin.Data.Entities.Currency", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<int?>("CodeTranslationId")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsNameFeminine");

                    b.Property<bool>("IsUnitNameFeminine");

                    b.Property<int>("NameTranslationId");

                    b.Property<int?>("PluralNameTranslationId");

                    b.Property<int?>("PluralUnitNameTranslationId");

                    b.Property<int?>("UnitNameTranslationId");

                    b.Property<byte>("UnitPrecision");

                    b.HasKey("Id");

                    b.HasIndex("CodeTranslationId");

                    b.HasIndex("NameTranslationId");

                    b.HasIndex("PluralNameTranslationId");

                    b.HasIndex("PluralUnitNameTranslationId");

                    b.HasIndex("UnitNameTranslationId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("CompanyName.ProductName.Admin.Data.Entities.CurrencyExchangeRate", b =>
                {
                    b.Property<int>("FromCurrencyId");

                    b.Property<int>("ToCurrencyId");

                    b.Property<decimal>("BuyRate");

                    b.Property<decimal>("SellRate");

                    b.HasKey("FromCurrencyId", "ToCurrencyId");

                    b.HasIndex("ToCurrencyId");

                    b.HasIndex("FromCurrencyId", "ToCurrencyId");

                    b.ToTable("CurrencyExchangeRates");
                });

            modelBuilder.Entity("CompanyName.ProductName.Admin.Data.Entities.Language", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<int>("NameTranslationID");

                    b.HasKey("Id");

                    b.HasIndex("NameTranslationID");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CompanyName.ProductName.Admin.Data.Entities.Permission", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("IdentityName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int>("NameTranslationID");

                    b.HasKey("Id");

                    b.HasIndex("NameTranslationID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CompanyName.ProductName.Admin.Data.Entities.Setting", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Key");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("CompanyName.ProductName.Admin.Data.Entities.SystemResource", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("IdentityName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int>("NameTranslationID");

                    b.HasKey("Id");

                    b.HasIndex("NameTranslationID");

                    b.ToTable("SystemResources");
                });

            modelBuilder.Entity("CompanyName.ProductName.Admin.Data.Entities.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("CompanyName.ProductName.Admin.Data.Entities.TranslationEntry", b =>
                {
                    b.Property<int>("TranslationId");

                    b.Property<int>("LanguageId");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("TranslationId", "LanguageId");

                    b.HasAlternateKey("LanguageId", "TranslationId");

                    b.HasIndex("TranslationId", "LanguageId");

                    b.ToTable("TranslationEntries");
                });

            modelBuilder.Entity("CompanyName.ProductName.Admin.Data.Entities.Country", b =>
                {
                    b.HasOne("CompanyName.ProductName.Admin.Data.Entities.Currency", "CountryCurrency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CompanyName.ProductName.Admin.Data.Entities.Translation", "NameTranslation")
                        .WithMany()
                        .HasForeignKey("NameTranslationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CompanyName.ProductName.Admin.Data.Entities.Currency", b =>
                {
                    b.HasOne("CompanyName.ProductName.Admin.Data.Entities.Translation", "CodeTranslation")
                        .WithMany()
                        .HasForeignKey("CodeTranslationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CompanyName.ProductName.Admin.Data.Entities.Translation", "NameTranslation")
                        .WithMany()
                        .HasForeignKey("NameTranslationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CompanyName.ProductName.Admin.Data.Entities.Translation", "PluralNameTranslation")
                        .WithMany()
                        .HasForeignKey("PluralNameTranslationId");

                    b.HasOne("CompanyName.ProductName.Admin.Data.Entities.Translation", "PluralUnitNameTranslation")
                        .WithMany()
                        .HasForeignKey("PluralUnitNameTranslationId");

                    b.HasOne("CompanyName.ProductName.Admin.Data.Entities.Translation", "UnitNameTranslation")
                        .WithMany()
                        .HasForeignKey("UnitNameTranslationId");
                });

            modelBuilder.Entity("CompanyName.ProductName.Admin.Data.Entities.CurrencyExchangeRate", b =>
                {
                    b.HasOne("CompanyName.ProductName.Admin.Data.Entities.Currency", "FromCurrency")
                        .WithMany()
                        .HasForeignKey("FromCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CompanyName.ProductName.Admin.Data.Entities.Currency", "ToCurrency")
                        .WithMany()
                        .HasForeignKey("ToCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CompanyName.ProductName.Admin.Data.Entities.Language", b =>
                {
                    b.HasOne("CompanyName.ProductName.Admin.Data.Entities.Translation", "NameTranslation")
                        .WithMany()
                        .HasForeignKey("NameTranslationID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CompanyName.ProductName.Admin.Data.Entities.Permission", b =>
                {
                    b.HasOne("CompanyName.ProductName.Admin.Data.Entities.Translation", "NameTranslation")
                        .WithMany()
                        .HasForeignKey("NameTranslationID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CompanyName.ProductName.Admin.Data.Entities.SystemResource", b =>
                {
                    b.HasOne("CompanyName.ProductName.Admin.Data.Entities.Translation", "NameTranslation")
                        .WithMany()
                        .HasForeignKey("NameTranslationID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CompanyName.ProductName.Admin.Data.Entities.TranslationEntry", b =>
                {
                    b.HasOne("CompanyName.ProductName.Admin.Data.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CompanyName.ProductName.Admin.Data.Entities.Translation")
                        .WithMany("TranslationEntries")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
